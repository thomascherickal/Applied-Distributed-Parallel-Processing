package Rand.Server;

import Rand.Client.*;
//single instruction multiple data stream
import com.ibm.dthreads.SPMDDistributedExecutionManager;
//for data about each DThread
import com.ibm.dthreads.DThreadExecutionContext;
//execution manager
import com.ibm.dthreads.DistributedExecutionManager;

public class Driver
{
    /**COMMAND LINE ARGS
     *args[0] = number of clients
     *args[1] = number of rands to be generated at each client
     */
    public static void main(String args[])
    {
        //args[1] =  Integer number of random numbers to be generated by each client random generators
        RandomGen randgen = new RandomGen(Integer.parseInt(args[1]));
        //args[0] = no of threads Integer
        DistributedExecutionManager dman = new SPMDDistributedExecutionManager(0);
        DThreadExecutionContext dcon = new DThreadExecutionContext(Integer.parseInt(args[0]));
      //manager executes Daemon threads on clients
dman.execute(randgen, dcon);
    }
}

File  Rand\Client\RandomGen.java


package Rand.Client;


//Thread info
import com.ibm.dthreads.DThread;
//message passer
import com.ibm.dthreads.MP.ObjectMP;


import javax.swing.JFrame;
import javax.swing.JTextArea;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.io.FileWriter;
import java.awt.BorderLayout;

public class RandomGen extends DThread
{
    File file; //save each set of random number
    JFrame frame;
    //number of random numbers per client
    long NUM_RAND;
    JTextArea textarea;
    int id;
    //Init values
    public RandomGen(long number_of_rands)
    {

        NUM_RAND = number_of_rands;
    }
//set up GUI
    private void InitComponents()
	{
	  frame = new JFrame("Random Number Generator");
        frame.setSize(300, 200);
        textarea = new JTextArea(10, 10);
        frame.setLayout(new BorderLayout());
        frame.add(textarea); // default BorderLayout value
        frame.setVisible(true);

        frame.addWindowListener(
                new WindowAdapter()
        {
            public void windowClosing(WindowEvent we)
            {
                System.exit(0);
            }
        }
       );
	}
//starting point of execution for the DThread
    public void run()
    {
      try {
	 InitComponents();
	//client id
id = DThread.getContext().getIdentity();
        FileWriter fw = new FileWriter(file = new File(id + ".dat"));
        long itr = 0;
// WRITE NUM_RAND values to file
        while (itr++ < NUM_RAND + 1)
        {
            fw.write(Rand() + "\n");
            textarea.setText(itr + " random numbers generated");
        }
        fw.close();
	} catch (IOException e)
	{
		textarea.setText("" + e);
	}
    }

	//static members required for the random number generator


	static int idum2 = 123456789;
	static int iv[], iy;

	private double Rand()
	{
	/**
	  * returns the uniform random deviate between 0 and 1 exclusive,
	  * is taken from Numerical Recipes in C++ by (P,T,V,F) Page 286
	  * idum is taken as  -0.5
	  */

		final int IM1 = 2147483563, IM2 = 2147483399;
		final int IA1 = 40014, IA2 = 40692, IQ1 = 53668, IQ2 = 52774;
		final int IR1 = 12211, IR2 = 3791, NTAB = 32, IMM1 = IM1 - 1;
		final int NDIV = 1 + IMM1 / NTAB;
		final double EPS = 3.0e-16, RNMX = 1.0 - EPS, AM = 1.0 / (double) IM1;

		iv = new int[NTAB];
		iy = 0;

		int idum = 1;

		int j, k;
		double temp;

		if (idum <= 0) {
			idum = (idum == 0 ? 1 : -idum);
			idum2 = idum;
			for (j = NTAB + 7; j >= 0; j--)
			{
				k = idum / IQ1;
				idum = IA1 * (idum - k * IQ1 ) - k * IR1;
				if (idum < 0) idum += IM1;
				if (j < NTAB) iv[j] = idum;
			}
			iy = iv[0];
		}

		k = idum / IQ1;
		idum = IA1 * (idum - k * IQ1) - k * IR1;
		if (idum < 0) idum += IM1;
		k = idum2 / IQ2;
		idum2 = IA2 * (idum2 - k * IQ2) - k * IR2;
		if (idum2 < 0) idum2 += IM2;
 		j = iy / NDIV;
		iy = iv[j] - idum2;
		iv[j] = idum;
		if (iy < 1) iy += IMM1;
		if ((temp = AM * iy ) > RNMX ) return RNMX;
		else return temp;
	}
